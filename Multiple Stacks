#include <stdio.h>
#define MAX 100

int stack[MAX], top1 = -1, top2 = MAX;

int isStack1Empty() {
    return (top1 == -1);
}

int isStack2Empty() {
    return (top2 == MAX);
}

int isStack1Full() {
    return (top1 == top2 - 1);
}

int isStack2Full() {
    return (top2 == top1 + 1);
}

void push_stack1(int data) {
    if (isStack1Full()) {
        printf("Stack-1 Overflow !!!\n");
    } else {
        stack[++top1] = data;
        printf("Element Added to Stack-1 !!!\n");
    }
}

void push_stack2(int data) {
    if (isStack2Full()) {
        printf("Stack-2 Overflow !!!\n");
    } else {
        stack[--top2] = data;
        printf("Element Added to Stack-2 !!!\n");
    }
}

int pop_stack1() {
    if (isStack1Empty()) {
        printf("Stack-1 Underflow !!!\n");
        return -1;
    } else {
        return stack[top1--];
    }
}

int pop_stack2() {
    if (isStack2Empty()) {
        printf("Stack-2 Underflow !!!\n");
        return -1;
    } else {
        return stack[top2++];
    }
}

int peek_stack1() {
    if (isStack1Empty()) {
        printf("Stack-1 is Empty!!!\n");
        return -1;
    } else {
        return stack[top1];
    }
}

int peek_stack2() {
    if (isStack2Empty()) {
        printf("Stack-2 is Empty!!!\n");
        return -1;
    } else {
        return stack[top2];
    }
}

void show_stack1() {
    if (isStack1Empty()) {
        printf("Stack-1 is Empty!!!\n");
    } else {
        printf("Stack-1 Elements:\n");
        for (int i = top1; i >= 0; i--) {
            printf("%d\n", stack[i]);
        }
    }
}

void show_stack2() {
    if (isStack2Empty()) {
        printf("Stack-2 is Empty!!!\n");
    } else {
        printf("Stack-2 Elements:\n");
        for (int i = top2; i < MAX; i++) {
            printf("%d\n", stack[i]);
        }
    }
}

int main() {
    int choice, data;

    while (1) {
        printf("\n1. Push to Stack-1\n");
        printf("2. Push to Stack-2\n");
        printf("3. Pop from Stack-1\n");
        printf("4. Pop from Stack-2\n");
        printf("5. Peek Stack-1\n");
        printf("6. Peek Stack-2\n");
        printf("7. Display Stack-1\n");
        printf("8. Display Stack-2\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to push to Stack-1: ");
                scanf("%d", &data);
                push_stack1(data);
                break;

            case 2:
                printf("Enter data to push to Stack-2: ");
                scanf("%d", &data);
                push_stack2(data);
                break;

            case 3:
                data = pop_stack1();
                if (data != -1) printf("Popped from Stack-1: %d\n", data);
                break;

            case 4:
                data = pop_stack2();
                if (data != -1) printf("Popped from Stack-2: %d\n", data);
                break;

            case 5:
                data = peek_stack1();
                if (data != -1) printf("Top of Stack-1: %d\n", data);
                break;

            case 6:
                data = peek_stack2();
                if (data != -1) printf("Top of Stack-2: %d\n", data);
                break;

            case 7:
                show_stack1();
                break;

            case 8:
                show_stack2();
                break;

            case 9:
                printf("Exiting...\n");
                return 0;

            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}
