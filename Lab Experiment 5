#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
int precedence(char opr){
    switch(opr){
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return -1;
    }
}
// char *reverseString(char *str)
// {
//     int n = strlen(str);
//     for (int i = 0; i < n / 2; i++)
//     {
//         char temp = str[i];
//         str[i] = str[n - i - 1];
//         str[n - i - 1] = temp;
//     }
//     return str;
// }
char* convertInfixToPostfix(char* exp){
    int size = strlen(exp), top=-1,index=0;
    char* str = (char*)malloc(size+1);
    char stack[size];
    for(int i=0; i<size; i++){
        char ch=exp[i];
        if(isalnum(ch)){
                str[index++]=ch;
        }
        else if(ch=='+' || ch=='-'||ch=='*' || ch=='/'||ch=='^'){
            if(top==-1)
                stack[++top]=ch;
            else{
                while(top!=-1 && precedence(ch)<=precedence(stack[top])){
                    str[index++]=stack[top--];
                }
                stack[++top]=ch;
            }
        }
        else if(ch=='('){
                stack[++top] = ch;
        }
        else if(ch==')'){
                while(stack[top]!='('){
                    str[index++] = stack[top--];
                }
            top--;
        }
    }
    while(top!=-1){
        str[index++] = stack[top--];
    }
    str[index]='\0';
    return str;
}
char* convertInfixToPrefix(char* exp){
    int size = strlen(exp), top=-1,index=0;
    char* str = (char*)malloc(size+1);
    char stack[size];
    for(int i=size-1; i>=0; i--){
        char ch=exp[i];
        if(isalnum(ch)){
                str[index++]=ch;
        }
        else if(ch=='+' || ch=='-'||ch=='*' || ch=='/'||ch=='^'){
            if(top==-1)
                stack[++top]=ch;
            else{
                while(top!=-1 && precedence(ch)<precedence(stack[top])){
                    str[index++]=stack[top--];
                }
                stack[++top]=ch;
            }
        }
        else if(ch==')'){
                stack[++top] = ch;
        }
        else if(ch=='('){
                while(stack[top]!=')'){
                    str[index++] = stack[top--];
                }
            top--;
        }
    }
    while(top!=-1){
        str[index++] = stack[top--];
    }

    str[index]='\0';
    //reverseString(str);
    strrev(str);
    return str;
}
char* convertPostfixToInfix(char* exp)
{
    int size = strlen(exp), top=-1;
    char stack[size][100];
    for(int i=0;i<size;i++){
        char ch=exp[i];
    if(isalnum(ch)){
        char temp[]={ch,'\0'};
        strcpy(stack[++top], temp);
    }
    else if(ch=='+' || ch=='-'||ch=='*' || ch=='/'||ch=='^'){
        char *s1 = stack[top--];
        char *s2 = stack[top--];
        char s3[100];
        snprintf(s3, 100, "(%s%c%s)", s2,ch,s1);
        strcpy(stack[++top], s3);
    }
    }
    char *s = (char*) malloc(strlen(stack[top])+1);
    strcpy(s, stack[top]);
    return s;
}
char* convertPrefixToInfix(char* exp)
{
    int size = strlen(exp), top=-1;
    char stack[size][100];
    for(int i=size-1;i>=0;i--){
        char ch=exp[i];
    if(isalnum(ch)){
        char temp[]={ch,'\0'};
        strcpy(stack[++top], temp);
    }
    else if(ch=='+'|| ch=='-'||ch=='*'|| ch=='/'||ch=='^'){
        char *s1 = stack[top--];
        char *s2 = stack[top--];
        char s3[100];
        snprintf(s3, 100, "(%s%c%s)", s1,ch,s2);
        strcpy(stack[++top], s3);
    }
    }
    char *s = (char*) malloc(strlen(stack[top])+1);
    strcpy(s, stack[top]);
    return s;
}
int main(){
    char exp[100];
    printf("Enter Infix Expression : ");
    gets(exp);
    printf("Postfix form of Infix Expression is %s is %s\n ",exp,convertInfixToPostfix(exp));
    printf("Prefix form of Infix Expression is %s is %s\n ",exp,convertInfixToPrefix(exp));
    printf("Enter Postfix Expression : ");
    gets(exp);
    printf("Infix form of Postfix Expression is %s is %s\n ",exp,convertPostfixToInfix(exp));
    printf("Enter Prefix Expression : ");
    gets(exp);
    printf("Infix form of Prefix Expression is %s is %s\n ",exp,convertPrefixToInfix(exp));
    return 0;
}
